<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<context:property-placeholder location="classpath:properties/*.properties" />
	
	<!-- 配置组件扫描 -->
	<context:component-scan base-package="top.ulane.springtest.*"/>
	<!-- 配置spring mvc注解扫描 -->
	<mvc:annotation-driven/>
	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="prefix" value="/WEB-INF/"/> 
    	<property name="suffix" value=".jsp"/> 
	</bean>
	
	<!-- 开启spring bean aop -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<!-- 开启普通对象aop，借助META-INF/aop.xml  -->
    <!-- <context:load-time-weaver/> -->
	
	<!-- 配置简单异常处理器 -->
	<!--  
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.StringIndexOutOfBoundsException">error1</prop>
			</props>
		</property>
	</bean>
	-->
	
	<!-- 如果不配置，jackson会有一个默认的messageconverter -->
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
	    <!-- 处理responseBody 里面日期类型,可能线程不安全，后期研究 -->
	    <!-- <property name="dateFormat">
	        <bean class="java.text.SimpleDateFormat">
	            <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
	        </bean>
	    </property> -->
	    <!-- 为null字段时不显示 -->
	    <!-- <property name="serializationInclusion">
	        <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
	    </property> -->
	</bean>
	<bean id="jacksonObjectMapperConfigure" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="objectMapper" />
        <property name="targetMethod" value="configure" />
        <property name="arguments">
            <list>
                <value type="com.fasterxml.jackson.databind.MapperFeature">USE_STD_BEAN_NAMING</value>
                <!-- 返回json的key是否保留原大写KEY->key -->
                <value>false</value>
            </list>
        </property>
    </bean>
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper" ref="objectMapper" />
			</bean>
    		<!-- <bean id="fastJsonConverter" factory-bean="fastJsonMvcConfigFactory" factory-method="fastJsonHttpMessageConverters" /> -->
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<mvc:interceptors>  
	    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->  
	    <!-- <bean class="top.ulane.springtest.interceptor.MyInterceptor"/> -->  
	    <mvc:interceptor>  
	        <mvc:mapping path="/commonBeanProxy"/>  
	        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->  
	        <bean class="top.ulane.springtest.interceptor.MyInterceptor"/>  
	    </mvc:interceptor>  
	</mvc:interceptors>  
	
	
</beans>